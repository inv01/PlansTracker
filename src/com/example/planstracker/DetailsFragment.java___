package com.example.planstracker;

import java.io.IOException;
import java.util.List;
import java.util.Locale;

//import android.R;
import android.app.Activity;
import android.app.Dialog;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
/*
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
*/
public class DetailsFragment extends Fragment  /*
implements
GooglePlayServicesClient.ConnectionCallbacks,
GooglePlayServicesClient.OnConnectionFailedListener, LocationListener*/ {
  private final static int
  CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;
  //private LocationClient mLocationClient;
  //private Location mCurrentLocation;
  private TextView mAddress;
  private ProgressBar mActivityIndicator;
  private String phoneNumber;
  private View view;
  
  public static DetailsFragment newInstance(int index) {
      DetailsFragment f = new DetailsFragment();
      Bundle args = new Bundle();
      args.putInt("index", index);
      f.setArguments(args);
      return f;
  }

  public int getShownIndex() {
      return getArguments().getInt("index", 0);
  }
  
  @Override
  public View onCreateView(LayoutInflater inflater,
          ViewGroup container, Bundle savedInstanceState) {
      if (container == null) {
          return null;
      }
      view = inflater
        .inflate(R.layout.details_fragment, container, false);
      LinearLayout details = (LinearLayout) view.findViewById(R.id.date_layout);
      TextView text = new TextView(getActivity());
      int padding = (int)TypedValue.applyDimension(
              TypedValue.COMPLEX_UNIT_DIP,
              4, getActivity().getResources().getDisplayMetrics());
      text.setPadding(padding, padding, padding, padding);
      details.addView(text);
      text.setText("" + getShownIndex());
      mAddress = (TextView) view.findViewById(R.id.address);
      mActivityIndicator =
              (ProgressBar) view.findViewById(R.id.address_progress);
      ImageView btnContact = (ImageView) view.findViewById(R.id.btnContact);
      btnContact.setOnClickListener(new OnClickListener(){
        @Override
        public void onClick(View v) {
          onContactClick(v);
        }
        
      });
       
      ImageView btnPhone = (ImageView) view.findViewById(R.id.btnPhone);
      btnPhone.setOnClickListener(new OnClickListener(){
        @Override
        public void onClick(View v) {
          phoneNumber = ((EditText) view.findViewById(R.id.edt_phone)).getText().toString();
          Intent intent = new Intent(Intent.ACTION_CALL);
          intent.setData(Uri.parse("tel:" + phoneNumber));
          getActivity().getBaseContext().startActivity(intent);
        }
      });
      ImageView btnEdit = (ImageView) view.findViewById(R.id.btnEdit);
      btnEdit.setOnClickListener(new OnClickListener(){
        @Override
        public void onClick(View v) {
          onEditClick(v);
        }
        
      });
      ImageView btnSave = (ImageView) view.findViewById(R.id.btnSave);
      btnSave.setOnClickListener(new OnClickListener(){
        @Override
        public void onClick(View v) {
          onSaveClick(v);
        }
        
      });
      ImageView btnDelete = (ImageView) view.findViewById(R.id.btnDelete);
      btnDelete.setOnClickListener(new OnClickListener(){
        @Override
        public void onClick(View v) {
          onDeleteClick(v);
        }
        
      });
      ImageView btnRefresh = (ImageView) view.findViewById(R.id.btnRefreshLocation);
      btnRefresh.setOnClickListener(new OnClickListener(){
        @Override
        public void onClick(View v) {
          onRefreshLocationClick(v);
        }
        
      });
      ImageView btnPicture = (ImageView) view.findViewById(R.id.btnPicture);
      btnPicture.setOnClickListener(new OnClickListener(){
        @Override
        public void onClick(View v) {
          onPictureClick(v);
        }
        
      });
      return view;
  }
  
  public void onContactClick(View view){
    
  }
  
  public void onEditClick(View view){
      
    }
  public void onSaveClick(View view){
    
  }
  public void onDeleteClick(View view){
    
  }
  public void onRefreshLocationClick(View view){
    /*if (servicesConnected()){
      mLocationClient.setMockMode(true);
      mCurrentLocation = mLocationClient.getLastLocation();
      if (Build.VERSION.SDK_INT >=
          Build.VERSION_CODES.GINGERBREAD
                      &&
          Geocoder.isPresent()) {
      // Show the activity indicator
      mActivityIndicator.setVisibility(View.VISIBLE);
      
      (new GetAddressTask(getActivity().getBaseContext())).execute(mCurrentLocation);
  }
    }*/
  }
  public void onPictureClick(View view){
    
  }

   
  private boolean servicesConnected() {
    // Check that Google Play services is available
    int resultCode =
            GooglePlayServicesUtil.
                    isGooglePlayServicesAvailable(getActivity());
    if (ConnectionResult.SUCCESS == resultCode) {
        // In debug mode, log the status
        Log.d("Location Updates",
                "Google Play services is available.");
        return true;
    // Google Play services was not available for some reason
    } else {
        showErrorDialog(resultCode);
        return false;
    }
}
  private void showErrorDialog(int errorCode){
    Dialog errorDialog = GooglePlayServicesUtil.getErrorDialog(
        errorCode,
            getActivity(),
            CONNECTION_FAILURE_RESOLUTION_REQUEST);

    // If Google Play services can provide an error dialog
    if (errorDialog != null) {
        ErrorDialogFragment errorFragment =
                new ErrorDialogFragment();
        errorFragment.setDialog(errorDialog);
        errorFragment.show(((FragmentActivity) getActivity()).getSupportFragmentManager(),
                "Location Updates");
    }
  }
//Define a DialogFragment that displays the error dialog
  public static class ErrorDialogFragment extends DialogFragment {
      // Global field to contain the error dialog
      private Dialog mDialog;
      // Default constructor. Sets the dialog field to null
      public ErrorDialogFragment() {
          super();
          mDialog = null;
      }
      // Set the dialog to display
      public void setDialog(Dialog dialog) {
          mDialog = dialog;
      }
      // Return a Dialog to the DialogFragment.
      @Override
      public Dialog onCreateDialog(Bundle savedInstanceState) {
          return mDialog;
      }
  }
  
  private class GetAddressTask extends
  AsyncTask<Location, Void, String> {
Context mContext;
public GetAddressTask(Context context) {
  super();
  mContext = context;
}
@Override
protected void onPostExecute(String address) {
    mActivityIndicator.setVisibility(View.GONE);
    mAddress.setText(address);
}
@Override
protected String doInBackground(Location... params) {
  Geocoder geocoder =
          new Geocoder(mContext, Locale.getDefault());
  // Get the current location from the input parameter list
  Location loc = params[0];
  // Create a list to contain the result address
  List<Address> addresses = null;
  try {
      /*
       * Return 1 address.
       */
      addresses = geocoder.getFromLocation(loc.getLatitude(),
              loc.getLongitude(), 1);
  } catch (IOException e1) {
  Log.e("LocationSampleActivity",
          "IO Exception in getFromLocation()");
  e1.printStackTrace();
  return ("IO Exception trying to get address");
  } catch (IllegalArgumentException e2) {
  // Error message to post in the log
  String errorString = "Illegal arguments " +
          Double.toString(loc.getLatitude()) +
          " , " +
          Double.toString(loc.getLongitude()) +
          " passed to address service";
  Log.e("LocationSampleActivity", errorString);
  e2.printStackTrace();
  return errorString;
  }
  // If the reverse geocode returned an address
  if (addresses != null && addresses.size() > 0) {
      // Get the first address
      Address address = addresses.get(0);
      /*
       * Format the first line of address (if available),
       * city, and country name.
       */
      String addressText = String.format(
              "%s, %s, %s",
              // If there's a street address, add it
              address.getMaxAddressLineIndex() > 0 ?
                      address.getAddressLine(0) : "",
              // Locality is usually a city
              address.getLocality(),
              // The country of the address
              address.getCountryName());
      // Return the text
      return addressText;
  } else {
      return "No address found";
  }
}
}
  
  @Override
  public void onActivityResult(
          int requestCode, int resultCode, Intent data) {
      // Decide what to do based on the original request code
      switch (requestCode) {
          case CONNECTION_FAILURE_RESOLUTION_REQUEST :
          /*
           * If the result code is Activity.RESULT_OK, try
           * to connect again
           */
              switch (resultCode) {
                  case Activity.RESULT_OK :
                    if (servicesConnected()){
                      Toast.makeText(
                          getActivity().getBaseContext(),
                          "Location service is available now", Toast.LENGTH_LONG).show();
                    }
                    break;
              }
      }
   }

  @Override
  public void onConnectionFailed(ConnectionResult connectionResult) {
    /*
     * Google Play services can resolve some errors it detects.
     * If the error has a resolution, try sending an Intent to
     * start a Google Play services activity that can resolve
     * error.
     */
    if (connectionResult.hasResolution()) {
        try {
            // Start an Activity that tries to resolve the error
            connectionResult.startResolutionForResult(
                    getActivity(),
                    CONNECTION_FAILURE_RESOLUTION_REQUEST);
            /*
             * Thrown if Google Play services canceled the original
             * PendingIntent
             */
        } catch (IntentSender.SendIntentException e) {
            // Log the error
            e.printStackTrace();
        }
    } else {
        /*
         * If no resolution is available, display a dialog to the
         * user with the error.
         */
        showErrorDialog(connectionResult.getErrorCode());
    }
  }

  @Override
  public void onConnected(Bundle arg0) {
    Toast.makeText(getActivity(), "Connected", Toast.LENGTH_SHORT).show();
  }

  @Override
  public void onDisconnected() {
    // Display the connection status
    Toast.makeText(getActivity(), "Disconnected. Please re-connect.",
            Toast.LENGTH_SHORT).show();
  }

  @Override
  public void onCreate(Bundle savedInstanceState) {
      
      /*
       * Create a new location client, using the enclosing class to
       * handle callbacks.
       */
      mLocationClient = new LocationClient(getActivity().getBaseContext(),
          this, this);
      
  }

  /*
   * Called when the Activity becomes visible.
   */
  @Override
  public void onStart() {
      super.onStart();
      // Connect the client.
      mLocationClient.connect();
  }

  /*
   * Called when the Activity is no longer visible.
   */
  @Override
  public void onStop() {
      // Disconnecting the client invalidates it.
      mLocationClient.disconnect();
      super.onStop();
  }
//Define the callback method that receives location updates
  @Override
  public void onLocationChanged(Location location) {
      // Report to the UI that the location was updated
      String msg = "Updated Location: " +
              Double.toString(location.getLatitude()) + "," +
              Double.toString(location.getLongitude());
      Toast.makeText(getActivity(), msg, Toast.LENGTH_SHORT).show();
  }
}
